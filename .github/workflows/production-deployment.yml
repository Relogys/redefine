# Workflow 名称
name: Vercel Production Deployment (Official Flow)

# 定义一些环境变量，从 GitHub Secrets 中获取 Vercel 的项目和组织 ID
# 这些环境变量可以直接在 run 步骤中使用 $VERCEL_ORG_ID 或 ${{ env.VERCEL_ORG_ID }} 访问
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# 定义触发 workflow 的事件
on:
  # 可以手动从 GitHub Actions 页面触发
  workflow_dispatch:
  # 当推送到 main 分支时触发
  push:
    branches:
      - main
  # 如果需要 PR 预览部署，可以加上 pull_request 事件，并修改部分步骤和部署命令

jobs:
  # 定义一个名为 production-deployment 的作业
  production-deployment:
    # 作业运行在最新的 Ubuntu 环境
    runs-on: ubuntu-latest

    # 作业步骤
    steps:
      # 步骤 1: Checkout 当前仓库的代码 (如果你的 workflow 文件在这个仓库)
      # 如果你的 Hexo 站点和主题都是克隆而来，这个 checkout 可能不是必需的，但保留通常无害
      - name: Checkout workflow repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Node.js 环境
      # 确保安装依赖和运行构建需要的 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # 推荐使用偶数版本的 Node.js LTS，请根据你的项目需求设置

      # 步骤 3: 克隆 Hexo 站点仓库到 hexo-site 目录
      # 假设你要部署的是这个 demo 仓库的内容
      - name: Clone Hexo site repository
        run: git clone https://github.com/EvanNotFound/redefine-demo.git hexo-site

      # 步骤 4: Checkout 主题仓库到 temp-theme 目录 (如果你需要将主题从单独仓库复制过来)
      - name: Checkout theme repository
        uses: actions/checkout@v4
        with:
          repository: Relogys/redefine # 替换为你的主题仓库地址
          path: 'temp-theme' # 克隆到临时目录

      # 步骤 5: 移动主题到 Hexo 站点目录的 themes 文件夹
      - name: Move theme into Hexo site
        run: |
          # 创建 themes 目录如果不存在
          mkdir -p hexo-site/themes
          # 将克隆下来的主题文件夹移动到 themes/redefine
          mv temp-theme hexo-site/themes/redefine

      # 步骤 6: 进入 Hexo 站点目录并安装依赖
      # 这个步骤会安装 hexo 以及 package.json 中列出的所有依赖
      - name: Install site dependencies
        run: |
          cd hexo-site
          npm install # 这将安装 hexo 以及你在 hexo-site 的 package.json 中列出的所有依赖

      # 步骤 7: 安装 Vercel CLI
      # 官方文档推荐全局安装
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # 步骤 8: 拉取 Vercel 项目信息 (可选，但官方文档推荐)
      # --yes 自动确认，--environment=production 指定环境拉取配置
      - name: Pull Vercel Environment Information
        run: |
          cd hexo-site # 进入站点目录执行
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} # 需要 VERCEL_TOKEN secret

      # 步骤 9: 使用 Vercel CLI 构建项目 (.vercel/output)
      # Vercel CLI 会检测是 Hexo 项目，自动运行 generate 并处理输出到 .vercel/output
      - name: Build Project Artifacts
        run: |
          cd hexo-site # 进入站点目录执行
          # --prod 指定为生产构建
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }} # 需要 VERCEL_TOKEN secret

# 步骤 10: 部署构建好的项目 (.vercel/output) 到 Vercel
      # --prebuilt 表示部署已经构建好的 .vercel/output 文件夹
      - name: Deploy Project Artifacts to Vercel
        run: |
          cd hexo-site # 进入站点目录执行，以便找到 .vercel/output 和由 vercel pull 生成的 .vercel 文件夹
          # --prebuilt 部署预构建的文件
          # --prod 部署到生产环境
          # token 仍然需要用于身份验证
          # 移除 --org, --project, --scope 参数，因为 vercel pull 已经建立了链接
          vercel deploy --prebuilt --prod \
            --token=${{ secrets.VERCEL_TOKEN }}

      # Vercel CLI 部署成功后，通常会自动创建 GitHub Deployment Status，无需额外步骤
